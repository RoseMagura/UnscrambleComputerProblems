Task 0:
    The Big O for this file is O(1), because it is just accessing data
    points in an array, which is very efficient. Regardless of the size of
    n (the input), the efficiency will remain at a constant level (1). 
Task 1:
    The Big O for this file is O(n), because using set is more efficient
    than list with this program. For different sizes of input, n, the 
    time needed will increase at a stable rate proportional to the input.
    For example, if the program processes a list of 500 phone records, we
    could estimate that it would take 500 ms (not exactly -- this is
    just to illustrate the relationship between the two values) Time is 
    directly proportional to the size of the input -- no squaring.
Task 2:
    The Big O for this file is O(n), because it uses a for loop (n),
    adds a value to the dictionary(n), 
    and finds the max (also n) for a dictionary. In this program,
    n represents the size of the phone records we are processing.
    Like Task 1, the time needed to perform the program increases
    with a linear pattern proportional to the size of the input.
Task 3:
    The Big O for this file is O(n log n), because it uses two for 
    loops (2n), count (n), and Timsort(n log n). As the size of the 
    input (n) increases, the time needed to run the program will be squared.
Task 4:
    The Big O for this file is O(n^2), because it uses four for 
    loops (4n) with the operation element in dictionary inside
    of the for loop (making it n^2) and Timsort(n log n). 
    As the size of the input increases, the time needed will increase 
    with a logarithmic slope multiplied by n^2.